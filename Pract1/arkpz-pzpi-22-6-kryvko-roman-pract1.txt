Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії
ЗВІТ
до практичного заняття з дисципліни
"Аналіз та рефакторинг коду"
(завдання №1)


Виконав: ст. гр. ПЗПІ-22-6
Кривко Роман Андрійович

Перевірив
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович




Харків 2024
________________

1 Правила оформлення програмного коду на прикладі мови програмування Rust

1. Вступ: Короткий опис мови програмування Rust та важливість правил оформлення коду
        Rust — це сучасна мова програмування, яка поєднує високу продуктивність, типову для мов на кшталт C і C++ з безпекою пам’яті. Основними концепціями Rust є система власності (ownership), запозичення (borrowing) та термін життя (lifetime), що гарантують відсутність типових помилок доступу до пам’яті, таких як "dangling pointers". Завдяки суворим статичним перевіркам та підтримці менеджера пакетів Cargo, Rust забезпечує легкий старт для розробки, стандартизацію та стабільність проєктів. Інструменти форматування, таких як rustfmt, дозволяють підвищити читабельність, стандартизувати оформлення коду в проєкті та зменшити кількість потенційних помилок, що робить спільну розробку більш ефективною та продуктивною. Дотримання правил оформлення коду допомагає підтримувати високий рівень якості коду в командній розробці, сприяючи зручності для розробників та довгостроковій підтримці проєктів.

2. Структура коду
        У екосистемі Rust стандартна структура проєкту забезпечується менеджером пакетів Cargo. При створенні нового проєкту за допомогою нього автоматично створюється відповідна структура. У корені пакета знаходяться файли Cargo.toml та Cargo.lock, що слугують для управління залежностями (dependencies) пакета та директорій src/, де міститься вихідний код. У разі необхідності у корені пакету також створюються директорії benches/, examples/, tests/ для тестів продуктивності (benchmarks), прикладів використання бібліотеки, тестів відповідно. Логічний поділ на модулі базується на розділенні функціональності: кожен модуль відповідає за чітко визначену частину логіки, наприклад, обробку даних, взаємодію з API або інтерфейс користувача. 

3. Форматування коду
        Стандартом відступу є використання 4 пробілів для кожного рівня. Для розміщення дужок Rust використовує стиль K&R (Kernighan & Ritchie). Наприклад:
     1        // Поганий приклад
     2        fn add(x: i32, y: i32) -> i32
     3        {
     4          x + y
     5        }
     6        // Гарний приклад
     7        fn add(x: i32, y: i32) -> i32 {
     8            x + y
     9        }

        Інструмент rustfmt автоматично вирівнює код згідно зі стандартами мови, забезпечуючи однаковий стиль у всьому проєкті. Під час оголошення змінних рекомендується використовути пробіл після двокрапки та з обох сторін символа “=”. Наприклад:
         1        // Поганий приклад
         2        let pattern : Type=expr;
         3        // Гарний приклад
         4        let pattern: Type = expr;
         5        // Теж гарний приклад
         6        let pattern;
         7        let pattern: Type;
         8        let pattern = expr;
Якщо можливо, оголошення тримають в межах одного рядка. Якщо довжина рядка перевищує загальноприйняту максимальну (100 символів), то вираз варто розбити на декілька рядків, роблячи одинарний відступ на кожному рядку після першого. Наприклад:
         1        // Гарний приклад
         2        let pattern: Type =
         3            expr;
Також рекомендується дотримуватися підходу, орієнтованого на вирази, наприклад:
         1        // Гарний приклад
         2        let x = if y { 1 } else { 0 };
         3        // Поганий приклад
         4        let x;
         5        if y {
         6            x = 1;
         7        } else {
         8            x = 0;
         9        }
Рекомендується використовувати відступи в межах блоку на відміну від візуального відступу. Це дозволяє зменшити відмінності, що виникають під час зміни коду. Приклад:
         1        // Гарний приклад
         2        a_function_call(
         3            foo,
         4            bar,
         5        );
         6    
         7        // Поганий приклад
         8        a_function_call(foo,
         9                        bar);
        Рекомендується використовувати кінцеві коми (trailing comma) при використанні декількох рядків. Це полегшує пересування коду, а також робить зміни під час редагування коду меншими, оскільки для додавання або видалення елементів не потрібно змінювати інший рядок, щоб додати або видалити кому. Приклад:
         1        // Гарний приклад
         2        let array = [
         3            element,
         4            another_element,
         5            yet_another_element,
         6        ];
         7        // Поганий приклад
         8        let array = [
         9            element,
        10            another_element,
        11            yet_another_element
        12        ];

   4. Іменування (іменування змінних, функцій, класів)
У мові Rust дотримуються загальноприйнятих принципів вибору імен: зрозумілість, лаконічність, унікальність, рекомендовано використовувати константи та параметри  замість «магічних» чисел.
Конвенції іменування для змінних, функцій та класів:
   * Типи мають бути UpperCamelCase,
   * Варіанти enum мають бути UpperCamelCase,
   * Поля структур мають бути snake_case,
   * Імена функцій і методів мають бути snake_case,
   * Локальні змінні мають бути snake_case,
   * Імена макросів мають бути snake_case,
   * Константи мають бути SCREAMING_SNAKE_CASE.
   * Якщо ім’я є зарезервованим словом (наприклад, crate), треба використовувати необроблений ідентифікатор (raw identifier) (r#crate) або підкреслення після слова (crate_).

   5. Коментарі
        Rust підтримує кілька типів коментарів, які допомагають структурувати код і пояснювати його логіку. Однорядкові коментарі починаються з //, багаторядкові коментарі огороджуються /* */. Рекомендується надавати перевагу однорядковим коментарям. Для створення документаційних коментарів використовується /// перед елементами публічного API, наприклад, функціями чи структурами, що дозволяє автоматично генерувати документацію через інструмент cargo doc. Також доступні коментарі типу //!, які використовуються на рівні модуля або файлу для загального опису його функціональності. Документаційні коментарі також підтримують використання спеціальних блоків коду, позначених трьома зворотними апострофами ```. Ці блоки дозволяють включати приклади коду безпосередньо в документацію, що робить її більш зрозумілою і корисною для розробників.
Приклад:
         1        //! # Заголовок модуля
         2        //! Цей модуль демонструє використання всіх типів коментарів у Rust.
         3    
         4        /// Додає два числа.
         5        ///
         6        /// # Приклад
         7        /// ```
         8        /// let result = add(2, 3);
         9        /// assert_eq!(result, 5);
        10        /// ```
        11        pub fn add(a: i32, b: i32) -> i32 {
        12            a + b // Однорядковий коментар: пояснює просту операцію додавання
        13        }
        14    
        15        fn main() {
        16            // Виклик функції `add` з тестовими значеннями
        17            let sum = add(10, 20);
        18                 
        19            println!("Sum: {}", sum);
        20        }




      6. Документування коду
        Rust забезпечує зручний механізм автоматичного створення документації за допомогою інструмента cargo doc. Він генерує HTML-документацію на основі документаційних коментарів (/// та //!), додаючи синтаксично підсвічені приклади коду, пояснення та структуру API. Документація включає всі публічні елементи проєкту, такі як модулі, функції, структури, enum та константи. За замовчуванням, cargo doc створює документацію у директорії target/doc. Ця функція також забезпечує актуальність документації, оскільки приклади коду автоматично тестуються через cargo test.

      7. Кодування на основі тестування (Test-Driven Development)
        Розробка на основі тестування (Test-Driven Development) широко підтримується у Rust завдяки вбудованому тестовому фреймворку. TDD базується на циклі "тест – код – рефакторинг": спочатку пишеться тест, що описує очікувану поведінку, потім створюється мінімальний код для його проходження, і нарешті код оптимізується без порушення тестів. Всім тестам у Rust повинна передувати спеціальна анотація #[cfg(test)]. Стандартом є розміщення коду тестів в кожному файлі вихідного коду. Наприклад:
         1        /// Додає два числа.
         2        ///
         3        /// # Приклад
         4        /// ```
         5        /// let result = add(2, 3);
         6        /// assert_eq!(result, 5);
         7        /// ```
         8        pub fn add(a: i32, b: i32) -> i32 {
         9            a + b
        10        }
        11    
        12        #[cfg(test)]
        13        mod tests {
        14            use super::*; // Імпортуємо функцію add для тестів
        15    
        16            #[test]
        17            fn test_add() {
        18                    assert_eq!(add(2, 3), 5);
        19                    assert_eq!(add(-1, 1), 0);
        20                    assert_eq!(add(0, 0), 0);
        21            }
        22        }


Інструмент cargo test автоматично запускає всі тести в проєкті, надаючи звіти про успіх або помилки.

         8. Інструменти та автоматизація для підтримки якості коду
        Rust надає набір інструментів для автоматизації та підтримки якості коду. Один з основних інструментів — це cargo, який є не тільки менеджером пакетів, а й інструментом для автоматизації тестування, форматування та компіляції проєкту. Для форматування коду використовується rustfmt, що автоматично приводить код до єдиного стилю при збереженні файлу вихідного коду. За потреби налаштування форматування rustfmt можна змінити, помістивши додаткові правила форматування в файл rustfmt.toml.

         9. Висновки
        Rust надає чітко визначені стандарти для організації та форматування коду, що сприяють його читабельності та підтримуваності. Загальноприйняті стандарти оформлення коду публікуються на офіційному сайті документації мови програмування, наприклад, Rust Style Guide.

         10. Використані джерела
The Rust Style Guide. https://doc.rust-lang.org/style-guide/
The Rust Programming Language. https://doc.rust-lang.org/book/
rustfmt documentation. https://rust-lang.github.io/rustfmt/

ДОДАТОК А
Посилання на відео
https://youtu.be/DXRllo2CGQ0
