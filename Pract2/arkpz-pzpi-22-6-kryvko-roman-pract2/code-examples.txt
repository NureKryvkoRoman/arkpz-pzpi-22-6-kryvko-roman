Replace Delegation with Inheritance
Фрагмент коду до рефакторингу:
 1        class PrintService {
 2            void print(String message) {
 3                System.out.println("Printing: " + message);
 4            }
 5        }

 6        class Printer {
 7            private PrintService printService = new PrintService();

 8            void printMessage(String message) {
 9                printService.print(message);
10            }
11        }

Фрагмент коду після рефакторингу:
 1        class Printer extends PrintService {
 2        }

 3        // Приклад використання
 4        Printer printer = new Printer();
 5        printer.print("Message");


Replace Inheritance with Delegation
Код до рефакторингу:
 1  interface TextFormatter {
 2      String formatText(String message);
 3  }

 4  // TextPrinter реалізує інтерфейс TextFormatter напряму
 5  class TextPrinter implements TextFormatter {
 6      @Override
 7      public String formatText(String message) {
 8          if (message.length() % 2 == 0) {
 9              return message.toUpperCase();
10          } else {
11              return message.toLowerCase();
12          }
13      }
14  }

15  // Приклад використання
16  public class PrintMessages {
17      public static void main(String[] args) {
18          TextPrinter printer = new TextPrinter();
19          System.out.println(printer.formatText("Message"));
20          System.out.println(printer.formatText("Another message"));
21      }
22  }


Фрагмент коду після рефакторингу:
1  interface TextFormatter {
2      String formatText(String message);
3  }


4  // Конкретні реалізації для різних варіантів поведінки
5  class UpperCaseFormatter implements TextFormatter {
6      @Override
7      public String formatText(String message) {
8          return message.toUpperCase();
9      }
10  }


11  class LowerCaseFormatter implements TextFormatter {
12      @Override
13      public String formatText(String message) {
14          return message.toLowerCase();
15      }
16  }


17  class ReverseFormatter implements TextFormatter {
18      @Override
19      public String formatText(String message) {
20          return new StringBuilder(message).reverse().toString();
21      }
22  }


23  class TextPrinter {
24      private TextFormatter formatter;


25      public TextPrinter(TextFormatter formatter) {
26          this.formatter = formatter;
27      }


28      public void setFormatter(TextFormatter formatter) {
29          this.formatter = formatter;
30      }


31      // Делегування
32      public String print(String message) {
33          return formatter.formatText(message);
34      }
35  }


36  // Приклад використання
37  public class DemoAfter {
38      public static void main(String[] args) {
39          TextPrinter printer = new TextPrinter(new UpperCaseFormatter());
40          System.out.println(printer.print("Message"));


41          printer.setFormatter(new LowerCaseFormatter());
42          System.out.println(printer.print("Message"));


43          printer.setFormatter(new ReverseFormatter());
44          System.out.println(printer.print("Message"));
45      }
46  }


Replace Type Code with State/Strategy
Код до рефакторингу:
1        class Employee {
2            static final int ENGINEER = 0;
3            static final int MANAGER = 1;
4            static final int INTERN = 2;


5            private int type;


6            Employee(int type) {
7                this.type = type;
8            }


9            double calculateSalary() {
10                switch (type) {
11                    case ENGINEER:
12                        return 5000;
13                    case MANAGER:
14                        return 7000;
15                    case INTERN:
16                        return 2000;
17                    default:
18                        throw new IllegalArgumentException("Invalid employee type");
19                }
20            }
21        }


Фрагмент коду після рефакторингу:
1        interface SalaryStrategy {
2            double calculateSalary();
3        }


4        class EngineerSalary implements SalaryStrategy {
5            public double calculateSalary() {
6                return 5000;
7            }
8        }


9        class ManagerSalary implements SalaryStrategy {
10            public double calculateSalary() {
11                return 7000;
12            }
13        }


14        class InternSalary implements SalaryStrategy {
15            public double calculateSalary() {
16                return 2000;
17            }
18        }


19        class Employee {
20            private SalaryStrategy salaryStrategy;


21            Employee(SalaryStrategy salaryStrategy) {
22                this.salaryStrategy = salaryStrategy;
23            }


24            double calculateSalary() {
25                return salaryStrategy.calculateSalary();
26            }
27        }
